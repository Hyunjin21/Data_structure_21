3) 연결 리스트 : 도입
데이터 구조의 개념과 연결리스트 - 메모리 효율적 관리 및 사용

자료구조 - 컴퓨터에 각기 다른 방법으로 저장할 수 있도록 해줌
데이터 구조 : 우리가 컴퓨터에 메모리를 더 효율적으로 관리하기 위해 새로 정의하는 구조체

struct 구조체 - c에서 자신만의 구조를 만들 수 있는 키워드 
	ex) person 구조체 : 이름, 번호 - 두 개의 값을 가진 우리만의 자료 종류 (비트맵 or 비트맵 헤더)
. 점 표기법 - 구조체의 속성값에 접근하여 가져올 때 사용 / 빨강, 초록, 파랑 픽셀을 조작할 때
	ex) person 구조체의 이름이나 번호를 가져오려면 변수 이름과 점 연산자를 이용해 자료 구조 안으로 들어간다.
* 별표 연산자 - 메모리 덩어리로 접근할 수 있는 역참조 연산자, 포인터 이용

연결 리스트 - 값들의 리스트를 저장하는 방법

배열 : 각 인데스의 값이 메모리 상에서 연이어 저장되어 있다.
단점 : 고정된 메모리 덩어리 -> 배열의 크기 조절해서 더 많은 값을 넣기 위해 최소한 더 많은 메모리 할당
         기존 배열에서 새 배열로 모든 값을 복사, 메모리 free = realloc (간단히 만드는 기능)
         따라서 배열에 추가하는 과정은 O(n) - 배열 전체를 새 공간에 복사하는데 시간이 오래 걸리기 때문
장점 : 대괄호 이용해서 쉽게 인덱싱 가능 
         랜덤접근으로 일정한 시간에 접근 가능 (무엇이 어디에 있는지 알 수 있다는 면에서 랜덤은 아님)
         바이너리 검색에 적용 가능

연결 리스트 : 메모리 덩어리 여러 개를 포함함 데이터 구조 (어떤 방식으로든 연결됨)
각 인덱스의 메모리 주소에서 자신의 값과 함께 바로 다음 값의 주소(포인터)를 저장함

목표 : 리스트들을 정렬된 상태로 유지하기
1. 크기가 1인 배열, 리스트의 크기는 1 0x123 
2. 모든 바이트는 어디엔가 저장, 이 메모리에는 많은 EMMA들이 방해
3. 약간의 빈 공간 2 0x456, 3 0x789 why? 컴퓨터 메모리에서 이 공간들만 사용 가능
+) 정의상 배열이 아니다. ->1, 2, 3이 인접해 있지 않기 때문(대괄호 사용x - 값들이 서로 붙어있어야 함)
4. 값을 저장하기 위한 하나의 메모리 덩어리에서 두 배의 메모리를 주어 유연하게
5. 두 개의 덩어리(필드)가 1을 나타냄       
          정수number : 1 0x123 
          next : 0x456 (리스트의 다음 요소를 가리키는 메모리 덩어리 = 다음 메모리 덩어리의 주소)
6. 포인터 = 화살표 -> 1, 2, 3 숫자 리스트는 연결됨
number : 1 0x123 next : 0x456 / number : 2 0x456 next : 0x789 / number : 3 0x789 next : NULL
7. 리스트의 끝을 알리는 특별한 값 저장 NULL (이 리스트에 더이상 남은 것이 없다)
문자 \0을 뜻하는 NUL != 널 NULL(포인터) 16진법0 , but 둘다 그 값을 보면 0이다
+) 숫자 3개 + 3개의 포인터 저장 = 두 배의 메모리/ 두 개의 포인터 사용, 하나는 리스트에 추가되는 것을 가리키게 됨

typedef struct
{
      int number; //정수
      node *next; //node 쓸 수 없음 - 두 줄 뒤에 node가 정의. 마지막줄 이전에 존재x
}
node; //직사각형으로 나타낼 수 있는 메모리 덩어리를 의미

typedef struct node //구조체의 공식 명칭, typedef : node 구조체에서 node로의 별칭을 제공함
{
      int number; //number : 각 node가 가지는 값
      struct node *next; // 이 포인터는 node 구조체를 가리키도록 정의됨, *next : 다음 node를 가리키는 포인터
}
node; //구조체의 별명

4) 연결 리스트 : 코딩
구조체 이용 - 연결리스트 구현과 사용

1.  node *list = NULL; 
  비어있는 연결 리스트 구현
  들어 있는 숫자가 없다면 적어도 리스트가 없다는 것을 알려주는 변수 필요
  값이 없을 때 표현 방법 : 0을 저장해서 널이라는 새로운 별명을 가지도록 한다
		       널로 초기화, 어떤 메모리 덩어리를 가리키는 화살표가 아직 없다(아직 추가 안함) 

2. node *n = malloc(sizeof(node));
  node를 저장할 만큼 메모리 덩어리를 할당, 임시로 변수 n에 저장 (임시로 쓰이는 변수 n은 node를 의미함)
  = 정수보다 큰 실제 node만큼 할당. malloc은 주소 반환 & 변수에 넣는다. 왼쪽 변수에 주소가 들어가게 됨
  +) 2를 넣기 위한 공간할당x 숫자와 포인터를 넣을 공간 할당o 둘을 합쳐서 node

3. (*n).number = 2;
  node의 number를 2로 설정 (못생긴 코드), 괄호는 연산의 순서를 위해
  n에 있는 주소에 해당하는 메모리 덩어리로 가서 number 필드에 접근해서 2로 만들어 준다

  n->number = 2; //n->number = (*n).number
  2에 해당하는 새로운 node를 할당한 다음 
  
  n->next = NULL; //*이나 .이나 괄호 사용x
  다음 node주소 but 아직 다음 node가 없다. 따라서 NULL
  
  중요!! malloc을 사용할때마다 검사하기 - 반환된 값을 항상 체크
  node *n = malloc(sizeof(node));
  if (n != NULL) //n이 널이 아닌지 검사하고 나머지 부분 실행, 반대로 n이 널이면 프로그램 끝내거나 return 해도 됨
  {
     n->number = 2;
     n->next = NULL;
  }

4. list = n;
  list : 변수 널로 초기화 / n : 새로운 node를 가진 임시 변수
  방금 할당한 메모리 덩어리의 주소와 같은 값을 가져야 함 
  +) n이 널이 아닌지 확인전까지 n을 건드리거나 화살표 기호 사용x

5. 리스트에 숫자 4추가
  node *n = malloc(sizeof(node)); //4를 넣기 위한 새로운 node를 할당받음
  if (n != NULL)
  {
     n->number = 4;
     n->next = NULL;
  }
  2의 포인터가 4를 가리키도록 / 만약 화살표 그냥 추가 : 4추가node는 어디에도 소속되지 않는 node

6. node *tmp = list; //포인터를 list와 같은 곳을 가리키도록 만들어준다
  while (tmp->next != NULL) //가리키는 곳이 널이 아니면 다음 코드 실행
  {
     tmp = tmp->next;
  }
  결론) next필드를 가리키라 - 널이 아니면 계속해서 자신을 업데이트하고 그 자신이 가리키고 있는 것을 가리키도록 한다
  =얼마나 리스트가 크든 계속해서 임시 포인터를 움직여서 널을 찾을 때까지 빵 부스러기를 따라간다

7. 오류Q. 연결 리스트의 순서를 유지(정렬)하기 위해서는 숫자1을 넣으면서 어떤 점을 고려해야 할까?
  A. 아무것도 2를 가리키지 않고 2가 버려지면 4, 5도 버려진다 
  = 값을 모두 잃어버림/사용하던 메모리를 완전히 잃어버린 경우도 있음 
  = 메모리 누수
  = 메모리에 다시 접근x 값들이 어디있는지 기억하는 변수가 없기 때문
  Valgrind를 사용 - 메모리가 누수되어 경고 발생 -> 아마도 메모리를 free하는 것을 잊었기 때문

8. n->next = list;
   list = n;
  1이 2를 가리키도록...=중복
  list가 1을 가리키도록
  =1을 가리키고 있는 방금 할당한 새로운 node의 next필드를 업데이트 시 list가 가리키고 있는 곳을 가리키도록 만든다
  n->x를 list가 가리키는 곳으로 지정하면 된다
  list는 n 그 자체를 가리키면 된다

9. 리스트 중간에 3을 넣고 싶다면...
  node에 사용하기 위하 메모리 할당
  Q. 가장 먼저 업데이트? (바로 2가 3을 가리키면 4와 5가 버려짐)
  A. 3이 4를 가리키도록 바꾼다 -> 2가 3을 가리키도록 업데이트 
 
10. 
  node *n = malloc(sizeof(node)); //malloc은 node를 저장할만큼의 크기의 메모리 덩어리 만들어줌
  //node *n은 node의 주소를 가진 포인터 만들어줌 - malloc의 반환값을 변수에 넣어서 n이 node를 저장할 수 있는 크기의 메모리 덩어리를 가리키도록 만듦
  //n : node를 가리키는 포인터, node의 주소 - malloc이 반환하기 때문
  if (n != NULL)                         
  {
     n->number = 1;
     n->next = NULL; //->쓰는 이유 : n은 node가 아니다, 따라서 n.number나 n.next 못 씀 별표기호를 붙인 뒤에 점 기호를 쓸 수 있다
  }

<코드 보기>

  #include<stdio.h>
  #include<stdlib.h>
  
  typedef struct node  //연결 리스트의 기본 단위 node 구조체 정의
  {
     int number;  //node 안에서 정수형 값이 저장되는 변수를 name으로 지정
     struct node*next;  //다음 node의 주소를 가리키는 포인터 *next로 지정
  }
  node;
  
  int main(void)
  {
    node *list = NULL;  //list라는 이름의 node 포인터 정의. 연결리스트 첫번째 node 가리킴.
    // 현재 아무것도 가리키고 있지 않아 NULL로 초기화  
    node *n = malloc (sizeof(node));  //새로운 node를 위해 메모리 할당하고 포인터*n으로 가리킴
    if(n == NULL)
    {
       return 1;
    }
    n->number = 1;  //n의 number 필드에 1의 값 저장, n이 가리키는 node의 number 필드를 의미
    n->next = NULL;  //n 다음에 정의된 node가 없으므로 NULL로 초기화
    list = n;  //첫 번째 node 정의 완료 - list포인터를 n포인터로 바꿈
  
    n = malloc(sizeof(node));  //list에 다른 node 연결위해 n에 새로운 메모리 할당
    if(n == NULL)
    {
       return 1;
    }
    n->number = 2; //n의 number와 next 값을 각각 저장
    n->next = NULL;
    list->next = n;  //list가 가리키는 것은 첫번째 node, 이 node의 다음 node를 n 포인터로 지정

    n = malloc(sizeof(node));
    if(n == NULL)
    {
       return 1;
    }
    n->number = 3;
    n->next = NULL;
    list->next->next = n;  //현재 list는 첫번째 node를 가리킴, 이는 두번째 node와 연결됨
    //세번째 node 연결 : 첫번째 node(list)의 다음 node(list->next)의 다음 node (list->next->next)를 n 포인터로 지정
 
    for (node *tmp = list; tmp!=NULL; tmp->next) //list로 연결된 node를 처음부터 방문, 각 number 값 출력
    //마지막 node의 next에 NULL저장되어 있음 : for루프의 종료 조건
    {
       printf("%i\n", tmp->number);
    }
    while (list != NULL)  //메모리를 해제해주기 위해 list에 연결된 node들을 처음부터 방문하면서 free
    {
       node *tmp = list->next;
       free(list);
       list = tmp;
    }
  }