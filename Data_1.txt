자료구조 Data Structures

1) malloc과 포인터 복습
tip. 데이터 구조 정의와 관리 = 메모리와 포인터 개념 이해하기

  int main()
  {
     int *x ;  //x라는 정수형 포인터 변수 생성
     int *y ;

     x = malloc(sizeof(int));  //4바이트의 공간을 요청. 메모리 덩어리를 할당하고 메모리 영역의 첫 주소를 반환해준다.

     *x = 42;  
     *y = 13;  //오류 - 해당 변수를 위한 공간을 할당하지 않음.  없거나 잘못된 주소에 접근
  }

//malloc 메모리를 할당해주는 함수
//정수형 크기를 잊어도 sizeof 연산자 사용하면 대부분 4를 반환한다. 

//x는 포인터 변수이기에 주소를 저장해도 된다. 즉, 변수x를 선언하고 그 안에 메모리의 주소를 저장한다.

//*은 역참조 연산자 (그 주소로 가라)

y = x ;  //x안에 있는 주소 y에도 저장
*y = 13; 


2) 배열의 크기 조정하기
일정한 크기의 배열이 주어졌을 때 크기 조정 - 다른 데이터로 채워져 있어 칸을 늘릴 수 없다.
새로운 공간에 메모리를 다시 할당하고 배열의 값을 옮겨야 한다.
O(n) : 배열의 크기 n만큼의 실행 시간 소요

malloc : 일정량의 메모리를 동적할당
- malloc을 통해 메모리 할당하면 그 메모리 덩어리의 주소를 반환해준다. 
즉, list라는 정수에 대한 포인터를 선언할 수 있다.

  #include <stdio.h>
  #include <stdlib.h> //헤더파일 malloc, free 포함

  int main(void)
  {  
     int list[3];
     
     int *list = malloc(3*sizeof(int));  //4+4+4=12 byte를 할당
     if (list == NULL)
     {
        return 1;  //메모리를 할당할 때마다 널이 반환되었는지 확인. 포인터가 잘 선언되었는지 확인.
     }

     list[0] = 1;
     list[1] = 2;
     list[2] = 3;  //크기가 3인 list를 할당하고 세 개의 값을 저장하는 코드

     int *tmp = malloc(4*sizeof(int));  //int 자료형4개 크기의 tmp라는 포인터 선언, 메모리 할당
     if (tmp == NULL)
     {
        return 1;
     }

     // Copy integers from old array into new array
     for (int i = 0; i < 3; i++)
     {
        tmp[i] = list[i];  //list값을 tmp로 복사
     }

     tmp[3] = 4;

     free(list);  //list의 메모리 초기화

     list = tmp;  //원래 포인터 이름을 그대로 쓰기 위해. 같은 곳을 가리키도록 지정

     for (int i = 0; i < 4; i++)
     {
       printf("%i\n", list[i]);
     }

     free(list);
  }

realloc 함수 : 이미 할당받은 기존 메모리 덩어리를 새롭게 가져오고 크든 작든 새롭게 설정된 크기로 바꾸는 작업 
list를 새로 할당한다.

  #include <stdio.h>
  #include <stdlib.h>

  int main(void)
  {
    int *list = malloc(3*sizeof(int));
    if (list == NULL)
    {
      return 1;
    }

    list[0] = 1;
    list[1] = 2;
    list[2] = 3;

    int *tmp = realloc(list, 4*sizeof(int));  //tmp 포인터에 메모리를 할당하고 list의 값을 복사함
    if (tmp == NULL)
    { 
      return 1;
    }

    list = tmp;
    list[3] = 4;
    
    for (int i =0; i < 4; i++)
    {
       printf("%i\n", list[i]);
    }
 
    free(list);
  }
