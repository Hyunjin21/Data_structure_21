9) 스택, 큐, 딕셔너리
원리와 구조

<큐> queues : 값이 아래로 쌓이는 구조, 가장 먼저 들어온 값이 가장 먼저 나감 - 배열, 연결리스트 통해 구현 가능
FIFO (First In First Out) 선입 선출의 특징을 가진 자료구조
enqueue : 삽입연산, 줄에 들어가서 서는 것
dequeue : 삭제연산, 줄을 빠져나오는 것 예시) 음식 받기나 프린트 완료
<->반대의 자료 구조 : 스택
front : 삭제 연산이 수행되는 곳
rear : 삽입 연산이 이루어지는 곳 
큐는 들어올 때 rear로 들어오지만 나올 때는 front부터 빠진다
접근은 가장 첫 원소와 끝 원소로만 가능
프론트 원소 = 가장 먼저 큐에 들어왔던 첫 번째 원소
리어 원소 = 가장 늦게 들어온 마지막 원소

예시) 가게나 식당 앞에 서있는 대기 줄 - 먼저 온 사람이 먼저 음식받기
먼저 요청을 보낸 순서대로 프린트 받기
활용) 프린터의 인쇄 대기열, 은행 업무, 프로세스 관리

#include <stdio.h>
#define MAX 100
int front=-1;
int rear=-1;
int queue[MAX];
 
int IsEmpty(void){
    if(front==rear)//front와 rear가 같으면 큐는 비어있는 상태 
        return true;
    else return false;
}
int IsFull(void){
    int tmp=(rear+1)%MAX; //원형 큐에서 rear+1을 MAX로 나눈 나머지값이
    if(tmp==front)//front와 같으면 큐는 가득차 있는 상태 
        return true;
    else
        return false;
}
void addq(int value){
    if(IsFull())
        printf("Queue is Full.\n");
    else{
         rear = (rear+1)%MAX;
         queue[rear]=value;
        }

}
int deleteq(){
    if(IsEmpty())
        printf("Queue is Empty.\n");
    else{
        front = (front+1)%MAX;
        return queue[front];
    }
}
 
int main(){
    
    addq(4);
    addq(7);
    addq(12);
    printf("%d\n",deleteq());
    printf("%d\n",deleteq());
    printf("%d\n",deleteq());
    deleteq();
    
    return 0;
}
결과
4
7
12
Queue is Empty.

<스택> stacks : 값이 위로 쌓이는 구조, 가장 나중에 들어온 값이 가장 먼저 나감 - 배열, 연결리스트 통해 구현 가능
LIFO (Last In First Out) 후입 선출의 특징을 가진 자료구조
push : 삽입연산, 스택에 어떤 요소를 밀어넣는다, 요소 추가
pop : 삭제연산, 가장 위의 요소를 뺀다, 요소 제거
같은 구조와 크기의 자료를 정해진 방향으로만 쌓을 수 있고 top으로 정한 곳을 통해서만 접근 가능

예시) 받은 메일함 가장 최근 받은 메일이 맨 위
식당의 쟁반-아래쪽 쟁반에게 굉장히 불공평한 일
-> 쟁반을 빨리 가져올 수 있고 최신 메일을 볼 수 있다는 장점
but, 스택이 사라질 때까지 그 메일을 보지 못함, 계속해서 스택을 채운다면 계속 위쪽에 새로운 쟁반이 생김
활용) 엡브라우저 방문기록 뒤로가기, 역순 문자열 만들기, 실행 취소

#include<stdio.h>
#define MAX_STACK_SIZE 100

int stack[MAX_STACK_SIZE];
int top = - 1 ;

int IsEmpty(){
     if(top<0)
           return true;
     else
           return false;
     }
int IsFull(){
     if(top>=MAX_STACK_SIZE-1)
           return true;
     else
           return false;
}

void push(int value){
     if(IsFull()==true)
            printf("스택이 가득 찼습니다.");
     else 
            stack[++top]=value;
}

int pop(){
    if(IsEmpty()==true)
           printf("스택이 비었습니다.");
    else
           return stack[top--];
}

int main(){
    push(3);
    push(5);
    push(12);
    printf("%d ",pop());
    printf("%d ",pop());
    printf("%d ",pop());

    return 0;
}
결과
12
5
3
스택이 비었습니다.

<딕셔너리> dictionaries : '키'에 해당하는 '값'을 저장하고 읽어옴
해시 테이블이라고도 생각할 수 있는 개념 - 해시테이블을 구현하기 위해 바구니 사용
키와 값, 단어와 값, 단어와 페이지번호, 그외의 다양한 쌍으로 이루어진 자료구조

예시) 아주 많은 단어를 담고 있는 영어사전, 문서에 있는 단어의 철자가 맞다면 사전에 존재, 오타가 있다면 존재X
sweetgreen 샐러드 주문 - O(n)만큼 샐러드를 찾을 필요가 없다
같은 성이면 큰 스택이 생김, O(n)이 됨
but, 이름이 고르게 분포해 있다면 굉장히 좋은 방식
